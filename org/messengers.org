#+TITLE: Messengers & aggregation
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:python :comments link
#+PROPERTY: PRJ-DIR ..

* Telegram
:PROPERTIES:
:header-args:python: :tangle (my/org-prj-dir "sqrt_data_service/flows/messengers/telegram.py") :comments link
:END:
Probably the easiest messenger export I've seen.

#+begin_src python
import argparse
import json
import pandas as pd
import sqlalchemy as sa
from collections import deque

from sqrt_data_service.api import settings, DBConn
#+end_src

#+begin_src python
__all__ = ['telegram_load']
#+end_src

Parse the JSON. The structure is more or less self-explanatory, there are lots of "about" fields, etc.

#+begin_src python
def parse_json(file_name):
    with open(file_name) as f:
        data = json.load(f)

    me_id = f'user{data["personal_information"]["user_id"]}'
    me = ' '.join(
        [
            data["personal_information"]["first_name"],
            data["personal_information"]["last_name"]
        ]
    )
    messages = deque()

    for chat in data['chats']['list']:
        if chat['id'] in settings.messengers.telegram.exclude_ids or chat[
            'type'] == 'saved_messages':
            continue
        name = chat['name']
        is_group = chat['type'] != 'personal_chat'
        target = name
        if is_group is False:
            for message in chat['messages']:
                if message['type'] != 'message':
                    continue
                if message['from_id'] != me_id:
                    target = message['from']
                    break

        for message in chat['messages']:
            if message['type'] != 'message':
                continue
            text = message['text']
            if isinstance(text, list):
                text = ' '.join(
                    [
                        token['text'] if isinstance(token, dict) else token
                        for token in text
                    ]
                )
            is_outgoing = message['from_id'] == me_id
            messages.append(
                {
                    'target': target,
                    'sender': message['from'],
                    'is_outgoing': is_outgoing,
                    'is_group': is_group,
                    'message': text,
                    'date': message['date'],
                    'is_edited': 'edited' in message
                }
            )

    df = pd.DataFrame(messages)
    df.date = df.date.astype('datetime64[ns]')
    return df
#+end_src

Store the dataframe.
#+begin_src python
def store_df(df):
    DBConn()
    with DBConn.get_session() as db:
        db.execute(sa.text('create schema if not exists "messengers"'))
        exists = DBConn.table_exists('telegram', 'messengers', db)
        if exists:
            db.execute(sa.text('truncate table messengers.telegram'))
        db.commit()

    df.to_sql(
        'telegram', schema='messengers', con=DBConn.engine, if_exists='append'
    )
#+end_src

The final flow:
#+begin_src python
def telegram_load(file_name):
    df = parse_json(file_name)
    store_df(df)
#+end_src

* Aggregation
:PROPERTIES:
:header-args:python: :tangle (my/org-prj-dir "sqrt_data_service/flows/messengers/aggregate.py") :comments link
:END:
Some logic to aggregate all the processed messengers.

#+begin_src python
import argparse
import json
import pandas as pd
import sqlalchemy as sa

from sqrt_data_service.api import settings, DBConn
#+end_src

#+begin_src python
__all__ = ['messengers_aggregate']
#+end_src

Load the mapping file.
#+begin_src python
def load_mapping():
    df = pd.read_csv(settings.messengers.mapping_file)
    with DBConn.get_session() as db:
        exists = DBConn.table_exists('mapping', 'messengers', db)
        if exists:
            db.execute(sa.text('truncate table messengers.mapping'))
        db.commit()

    df.to_sql(
        'mapping', schema='messengers', con=DBConn.engine, if_exists='append'
    )
#+end_src

Create aggregate views.
#+begin_src sql :noweb-ref msg-views
CREATE OR REPLACE VIEW messengers.all_messages AS
(
SELECT target, sender, is_outgoing, date_trunc('day', date)::date date, is_group, 'vk' messenger
FROM vk.messages
UNION ALL
SELECT coalesce(M.vk, T.target)      target,
       coalesce(M2.vk, T.sender)     sender,
       is_outgoing,
       date_trunc('day', date)::date date,
       is_group,
       'telegram'                    messenger
FROM messengers.telegram T
         LEFT JOIN messengers.mapping M ON M.telegram = T.target
         LEFT JOIN messengers.mapping M2 ON M2.telegram = T.sender
    );

CREATE OR REPLACE VIEW messengers.aggregate AS
SELECT target, sender, is_outgoing, is_group, date, messenger, count(*) count
FROM messengers.all_messages
GROUP BY target, sender, is_outgoing, is_group, date, messenger
ORDER BY date DESC;
#+end_src

#+begin_src python :noweb yes
MSG_VIEWS = """
<<msg-views>>
"""

def create_views():
    with DBConn.get_session() as db:
        db.execute(MSG_VIEWS)
        db.commit()
#+end_src

The flow.

#+begin_src python
def messengers_aggregate():
    DBConn()
    load_mapping()
    create_views()
#+end_src

* CLI & init
:PROPERTIES:
:header-args:python: :tangle (my/org-prj-dir "sqrt_data_service/flows/messengers/cli.py") :comments link
:END:

Create the deployment:
#+begin_src python
import click

from sqrt_data_service.api import settings

from .telegram import telegram_load
from .aggregate import messengers_aggregate

__all__ = ['msg']

@click.group()
def msg():
    pass

@msg.command(help='Load data from telegram', name='load-telegram')
def telegram_cmd():
    telegram_load()

@msg.command(help='Aggregate data from messengers', name='aggregate')
def aggregate_cmd():
    messengers_aggregate()
#+end_src

#+begin_src python :tangle (my/org-prj-dir "sqrt_data_service/flows/messengers/__init__.py")
from .aggregate import *
from .cli import *
from .telegram import *
#+end_src
